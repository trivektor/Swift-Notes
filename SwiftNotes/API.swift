//  This file was automatically generated and should not be edited.

import Apollo

/// Autogenerated input type of CreateNote
public struct CreateNoteInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(body: String, clientMutationId: Swift.Optional<String?> = nil) {
    graphQLMap = ["body": body, "clientMutationId": clientMutationId]
  }

  public var body: String {
    get {
      return graphQLMap["body"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "body")
    }
  }

  /// A unique identifier for the client performing the mutation.
  public var clientMutationId: Swift.Optional<String?> {
    get {
      return graphQLMap["clientMutationId"] as! Swift.Optional<String?>
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "clientMutationId")
    }
  }
}

public final class AllNotesQuery: GraphQLQuery {
  public let operationDefinition =
    "query AllNotes {\n  notes {\n    __typename\n    body\n  }\n}"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("notes", type: .nonNull(.list(.nonNull(.object(Note.selections))))),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(notes: [Note]) {
      self.init(unsafeResultMap: ["__typename": "Query", "notes": notes.map { (value: Note) -> ResultMap in value.resultMap }])
    }

    public var notes: [Note] {
      get {
        return (resultMap["notes"] as! [ResultMap]).map { (value: ResultMap) -> Note in Note(unsafeResultMap: value) }
      }
      set {
        resultMap.updateValue(newValue.map { (value: Note) -> ResultMap in value.resultMap }, forKey: "notes")
      }
    }

    public struct Note: GraphQLSelectionSet {
      public static let possibleTypes = ["Note"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("body", type: .scalar(String.self)),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(body: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "Note", "body": body])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var body: String? {
        get {
          return resultMap["body"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "body")
        }
      }
    }
  }
}

public final class CreateNoteMutation: GraphQLMutation {
  public let operationDefinition =
    "mutation CreateNote($input: CreateNoteInput!) {\n  createNote(input: $input) {\n    __typename\n    note {\n      __typename\n      id\n      body\n    }\n  }\n}"

  public var input: CreateNoteInput

  public init(input: CreateNoteInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createNote", arguments: ["input": GraphQLVariable("input")], type: .object(CreateNote.selections)),
    ]

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createNote: CreateNote? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createNote": createNote.flatMap { (value: CreateNote) -> ResultMap in value.resultMap }])
    }

    public var createNote: CreateNote? {
      get {
        return (resultMap["createNote"] as? ResultMap).flatMap { CreateNote(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "createNote")
      }
    }

    public struct CreateNote: GraphQLSelectionSet {
      public static let possibleTypes = ["CreateNotePayload"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("note", type: .nonNull(.object(Note.selections))),
      ]

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(note: Note) {
        self.init(unsafeResultMap: ["__typename": "CreateNotePayload", "note": note.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var note: Note {
        get {
          return Note(unsafeResultMap: resultMap["note"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "note")
        }
      }

      public struct Note: GraphQLSelectionSet {
        public static let possibleTypes = ["Note"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("body", type: .scalar(String.self)),
        ]

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: GraphQLID, body: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "Note", "id": id, "body": body])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return resultMap["id"]! as! GraphQLID
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var body: String? {
          get {
            return resultMap["body"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "body")
          }
        }
      }
    }
  }
}